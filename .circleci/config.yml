version: 2.1

orbs:
  win: circleci/windows@1.0.0

jobs:
  cmake_no_grpc:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_opentracing.sh
      - run: ./ci/install_protobuf.sh
      - run: ./ci/do_ci.sh cmake.minimal
      - store_artifacts:
          path: /build/Testing/Temporary/LastTest.log
          destination: Test.log

  cmake_with_grpc:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_grpc.sh
      - run: ./ci/install_libevent.sh
      - run: ./ci/install_cares.sh
      - run: ./ci/install_opentracing.sh
      - run: ./ci/do_ci.sh cmake.full
      - store_artifacts:
          path: /build/Testing/Temporary/LastTest.log
          destination: Test.log

  test:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_bazel.sh
      - run: ./ci/do_ci.sh bazel.test

  asan:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_clang.sh
      - run: ./ci/install_bazel.sh
      - run: ./ci/do_ci.sh bazel.asan

  tsan:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_clang.sh
      - run: ./ci/install_bazel.sh
      - run: ./ci/do_ci.sh bazel.tsan

  windows:
    executor: win/vs2019
    steps:
      - checkout
      - run: ./ci/install_cmake.ps1
      - run: ./ci/setup_windows_build_environment.ps1
      - run: ./ci/do_ci.ps1 build

  release:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - run: apt-get -qq update; apt-get -y install git ssh
      - checkout
      - run: ./ci/setup_build_environment.sh
      - attach_workspace:
          at: /plugin
      - run: ./ci/do_ci.sh release

  benchmark:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_bazel.sh
      - run: ./ci/do_ci.sh bazel.benchmark
      - store_artifacts:
          path: /benchmark
          desination: benchmark

  clang_tidy:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_clang.sh
      - run: ./ci/install_bazel.sh
      - run:
          command: ./ci/do_ci.sh clang_tidy
          no_output_timeout: 1800
      - store_artifacts:
          path: /clang-tidy-result.txt
          destination: /clang-tidy-result.txt
      - store_artifacts:
          path: /clang-tidy-errors.txt
          destination: /clang-tidy-errors.txt

  build_plugin:
    # resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - run: apt-get -qq update; apt-get -y install git ssh
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_bazel.sh

      - restore_cache:
          key: bazel-cache

      - run:
          command: ./ci/do_ci.sh plugin
          no_output_timeout: 30m

      - save_cache:
          paths:
            - ~/.cache/bazel
          key: bazel-cache

      - store_artifacts:
          path: /plugin
          destination: plugin

      - persist_to_workspace:
          root: /plugin
          paths:
            - "*"

  plugin_test:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - attach_workspace:
          at: /plugin
      - run: ./ci/do_ci.sh plugin.test

  python_wheel_test:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: apt-get -qq update; apt-get -y install python python-pip python3 python3-pip
      - attach_workspace:
          at: /plugin
      - run: ./ci/do_ci.sh python.wheel.test

  coverage:
    resource_class: xlarge
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run: ./ci/setup_build_environment.sh
      - run: ./ci/install_bazel.sh
      - run: ./ci/do_ci.sh bazel.coverage
      - store_artifacts:
          path: /coverage
          desination: coverage

  regression_test:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      - run: cd ~; git clone https://github.com/isaaczinda/tracer-benchmark.git repo
      - run: ./scripts/ci_setup.sh
      - attach_workspace:
          at: ~/plugin
      - run: sudo pip install ~/plugin/*.whl
      - run: pytest -s --client_name python-cpp test_client.py
      - store_artifacts:
          path: logs
          destination: logs

  make_graphs:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

    steps:
      - run: cd ~; git clone https://github.com/isaaczinda/tracer-benchmark.git repo
      - run: ./scripts/ci_setup.sh
      - attach_workspace:
          at: ~/plugin
      - run: sudo pip install ~/plugin/*.whl
      - run: mkdir graphs
      - run: python cpu_graphs.py python-cpp --runtime 10 --trials 10
      - run: python memory_graphs.py python-cpp
      - run: python dropped_graphs.py python-cpp
      - run: python disconnect_graphs.py python-cpp

      - store_artifacts:
          path: logs
          destination: logs
      - store_artifacts:
          path: graphs
          destination: graphs

workflows:
  version: 2
  build_and_test:
    jobs:
      - cmake_no_grpc
      - cmake_with_grpc
      - test
      - asan
      - tsan
      - windows
      - benchmark
      - coverage
      - build_plugin
      - clang_tidy
      - plugin_test:
          requires:
            - build_plugin
      - python_wheel_test:
          requires:
            - build_plugin
      - regression_test:
          requires:
            - build_plugin
      - approve_make_graphs:
          type: approval
          requires:
            - build_plugin
      - make_graphs:
          requires:
            - approve_make_graphs
  deploy:
    jobs:
      - build_plugin:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
      - release:
          requires:
            - build_plugin
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
